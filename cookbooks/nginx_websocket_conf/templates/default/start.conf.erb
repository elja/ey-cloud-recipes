server {

  #
  # The default port to listen on.
  #
  # Note that this may be also specified as IP:Port combinations.
  #
  # By default Nginx will listen for traffic on the specified port for all IP
  # addresses assigned to the host.
  #
  listen <%= @server_port %>;

  #
  # Server Names
  #
  # This is the list of IP's and/or domain names with any wildcards or
  # subdomains. The special value '_' is used to match all domains and IPs and
  # generally denotes the default server for the entire Nginx process.
  #
  # Note that if you specify any domains with wild cards, the very first domain
  # listed must be without a wild card. For example:
  #
  # server_name www.mydomain.org *.mydomain.org;
  #
  # It is good practice to include wildcard subdomains so that Nginx will not
  # require a restart when new services are added for an application.
  #
  server_name <%= @server_name %>

  #
  # SSL certificates
  #
  # Be sure that the directory and files are owned by and/or readable by the
  # Nginx user. Additionally, it is recommended that you do not use signed
  # certificates. The justification for this reocommendation is that in order to
  # start up the Nginx server the password will need to be typed in every time.
  # This precludes automatic/automated web server restarts on boot or otherwise.
  #

  #
  # This assigns the maximum accepted body size of client request. It is placed
  # here as a precaution to limit against certain kinds of attacks. Be aware that
  # it is here in case the application accepts large file uploads. In such a case
  # this value will need to be adjusted.
  #
  client_max_body_size 100M;

  #
  # The application root which is inherited for all location blocks below.
  #
  root /data/<%= @app_name %>/current/public;

  #
  # Logging
  #
  # Log files are stored within the /var/log/engineyard/nginx/ directory.
  #
  access_log /var/log/engineyard/nginx/<%= @app_name %>.access.log main;
  error_log /var/log/engineyard/nginx/<%= @app_name %>.error.log notice;
  #
  # Expire header on assets. For more information on the reasoning behind
  # this please browse http://developer.yahoo.com/performance/rules.html#expires
  #
  location ~ ^/juggernaut.* {
    rewrite ^/juggernaut/(.*)$ /$1 break;
    proxy_pass http://127.0.0.1:<%= @juggernaut_port %>;
  }
  
  location ~ ^/socket.io.* {
    proxy_pass http://127.0.0.1:<%= @juggernaut_port %>;
  }

  location ~ ^/(images|assets|javascripts|stylesheets)/ {
    expires 10y;
    try_files  $uri $uri/index.html /last_assets/$uri /last_assets/$uri.html @app_<%= @app_name %>;
  }

  #
  # HTTP Error handling.
  #
  # 404 - Resource Not found.
  error_page 404 /404.html;
  # 50X - Application Error(s)
  error_page 500 502 504 /500.html;
  # 503 - System Maintenance
  error_page 503 @503;
  recursive_error_pages on;
  location @503 {

    error_page 405 = /system/maintenance.html;

    # Serve static assets if found.
    if (-f $request_filename) {
      break;
    }

    rewrite ^(.*)$ /system/maintenance.html break;
  }

  #
  # Passenger Application block
  #
  location @app_<%= @app_name %> {

    # Turn on the passenger Nginx helper for this location.
    passenger_enabled on;

    # These don't seem to work in stack, which is in the http {} block

    passenger_set_cgi_param HTTP_X_FORWARDED_FOR   $proxy_add_x_forwarded_for;
    passenger_set_cgi_param HTTP_X_REAL_IP         $remote_addr;
    passenger_set_cgi_param HTTP_HOST              $http_host;
    passenger_set_cgi_param HTTP_X_FORWARDED_PROTO $scheme;
    passenger_set_cgi_param HTTP_X_REQUEST_START   't=$start_time';
    passenger_set_cgi_param HTTP_X_QUEUE_START     't=$start_time';
    # Rails 3.0 apps that use rack-ssl use SERVER_PORT to generate a https
    # URL. Since internally nginx runs on a different port, the generated
    # URL looked like this: https://host:81/ instead of https://host/
    # By setting SERVER_PORT this is avoided.
    passenger_set_cgi_param SERVER_PORT            <%= @server_port %>;

    #
    # Define the rack/rails application environment.
    #
    rack_env <%= @env %>;

    #
    # 2 application instances is the minimum required to serve any real traffic.
    #
    # This avoids 'first request' startup delay 'issues' that can be seen after
    # restarting an Nginx server.
    #
    passenger_min_instances 2;

    #
    # If global queuing is turned on, then Phusion Passenger will use a global
    # queue thatâ€™s shared between all backend processes. If an HTTP request
    # comes in, and all the backend processes are still busy, then Phusion
    # Passenger will wait until at least one backend process is done, and will
    # then forward the request to that process.
    #
    # http://www.modrails.com/documentation/Users%20guide%20Nginx.html#PassengerUseGlobalQueue
    #
    passenger_use_global_queue on;
  }

  #
  # The default location will process the request as follows:
  #
  # 1. If a system maintenance page is in place, serve it.
  # 2. If the request uri matches a resource on disk, serve it.
  # 3. If the request uri/index.html matches a cache file on disk, serve it.
  # 4. If the request uri.html is cached on disk, serve it.
  # 5. Failing any caching or system maintenance, pass the request to the
  #    application.
  #

  location / {
  if (-f $document_root/system/maintenance.html) { return 503; }
    try_files  $uri $uri/index.html $uri.html @app_<%= @app_name %>;
  }

  include /etc/nginx/servers/<%= @app_name %>/custom.conf;
}

